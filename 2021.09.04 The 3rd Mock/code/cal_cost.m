function [C, TC, PC1, PC2] = cal_cost(S, D, coeffT)
% 计算在给定分配方案 S 及需求量 D 下的总成本 C
% S 为 <10x6x6 double>。从低维到高维：受灾点，物资，储备点
% coeffT 为运输时间的系数，受严重灾害影响，这个系数会有所改变

% 储备量
W = [10074	10074	286	41	0	699
14892	14892	152	566	820	667
0	0	376	207	252	179
33951	33951	261	325	585	306
5768	6128	730	421	556	1000
4200	3665	706	723	799	0];
% 运输单价
UC = [0.0075	0.00075	0.268	0.25	0.000125	0.00025];
% 运输时间
T = [0.64 	0.90 	0.10 	1.08 	1.17 	0.66 	0.96 	1.04 	0.52 	1.37 
0.47 	0.71 	0.48 	1.45 	0.64 	0.79 	1.44 	0.10 	1.17 	0.00 
0.24 	1.04 	0.80 	0.80 	0.14 	0.69 	0.36 	0.38 	1.01 	0.69 
0.27 	1.05 	0.98 	0.49 	0.40 	1.31 	1.01 	0.34 	0.01 	0.64 
0.63 	0.96 	0.61 	0.16 	0.23 	0.78 	0.43 	1.00 	0.90 	0.69 
0.14 	0.05 	1.23 	0.92 	0.42 	1.42 	1.01 	1.27 	0.58 	1.16 ];
T = coeffT * T;
% 两个单位惩罚成本
UPC1 = [0.1045	0.0105	3.736	3.485	0.00175	0.0035];
UPC2 = [0.5225	0.0525	18.68	17.425	0.00875	0.0175];

% 计算运输成本
TC = 0;
for i = 1 : 6
    for j = 1 : 10
        for k = 1 : 6
            TC = TC + T(i, j) * S(j, k, i) * UC(k);
        end
    end
end
% 计算第一种惩罚成本
PC1 = 0;
Sjk = sum(S, 3);  % 在第 3 维上进行求和
for j = 1 : 10
    for k = 1 : 6
        PC1 = PC1 + (D(j, k) - Sjk(j, k)) * UPC1(k);
    end
end
% 计算第二种惩罚成本
PC2 = 0;
for k = 1 : 6
    for a = 1 : 10
        for b = (a + 1) : 10
            PC2 = PC2 + abs((D(a, k) - Sjk(a, k)) - (D(b, k) - Sjk(b, k))) * UPC2(k);
        end
    end
% 计算总成本
C = TC + PC1 + PC2;
end